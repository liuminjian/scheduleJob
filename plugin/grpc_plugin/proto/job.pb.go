// Code generated by protoc-gen-go. DO NOT EDIT.
// source: job.proto

package job

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type JobStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobStatus) Reset()         { *m = JobStatus{} }
func (m *JobStatus) String() string { return proto.CompactTextString(m) }
func (*JobStatus) ProtoMessage()    {}
func (*JobStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32c477d91a04ead, []int{0}
}

func (m *JobStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobStatus.Unmarshal(m, b)
}
func (m *JobStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobStatus.Marshal(b, m, deterministic)
}
func (m *JobStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobStatus.Merge(m, src)
}
func (m *JobStatus) XXX_Size() int {
	return xxx_messageInfo_JobStatus.Size(m)
}
func (m *JobStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_JobStatus.DiscardUnknown(m)
}

var xxx_messageInfo_JobStatus proto.InternalMessageInfo

type JobList struct {
	JobReq               []*JobReq `protobuf:"bytes,1,rep,name=jobReq,proto3" json:"jobReq,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *JobList) Reset()         { *m = JobList{} }
func (m *JobList) String() string { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()    {}
func (*JobList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32c477d91a04ead, []int{1}
}

func (m *JobList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobList.Unmarshal(m, b)
}
func (m *JobList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobList.Marshal(b, m, deterministic)
}
func (m *JobList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobList.Merge(m, src)
}
func (m *JobList) XXX_Size() int {
	return xxx_messageInfo_JobList.Size(m)
}
func (m *JobList) XXX_DiscardUnknown() {
	xxx_messageInfo_JobList.DiscardUnknown(m)
}

var xxx_messageInfo_JobList proto.InternalMessageInfo

func (m *JobList) GetJobReq() []*JobReq {
	if m != nil {
		return m.JobReq
	}
	return nil
}

type JobReq struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Crontab              string   `protobuf:"bytes,3,opt,name=crontab,proto3" json:"crontab,omitempty"`
	Command              string   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobReq) Reset()         { *m = JobReq{} }
func (m *JobReq) String() string { return proto.CompactTextString(m) }
func (*JobReq) ProtoMessage()    {}
func (*JobReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32c477d91a04ead, []int{2}
}

func (m *JobReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobReq.Unmarshal(m, b)
}
func (m *JobReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobReq.Marshal(b, m, deterministic)
}
func (m *JobReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobReq.Merge(m, src)
}
func (m *JobReq) XXX_Size() int {
	return xxx_messageInfo_JobReq.Size(m)
}
func (m *JobReq) XXX_DiscardUnknown() {
	xxx_messageInfo_JobReq.DiscardUnknown(m)
}

var xxx_messageInfo_JobReq proto.InternalMessageInfo

func (m *JobReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JobReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobReq) GetCrontab() string {
	if m != nil {
		return m.Crontab
	}
	return ""
}

func (m *JobReq) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

type Result struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_f32c477d91a04ead, []int{3}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*JobStatus)(nil), "JobStatus")
	proto.RegisterType((*JobList)(nil), "JobList")
	proto.RegisterType((*JobReq)(nil), "JobReq")
	proto.RegisterType((*Result)(nil), "Result")
}

func init() { proto.RegisterFile("job.proto", fileDescriptor_f32c477d91a04ead) }

var fileDescriptor_f32c477d91a04ead = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x6e, 0x83, 0x30,
	0x10, 0x86, 0x43, 0x20, 0x50, 0x2e, 0x52, 0x07, 0x4f, 0x2e, 0xad, 0x54, 0x64, 0x75, 0x40, 0x1d,
	0x18, 0x52, 0xa9, 0x0f, 0x81, 0xda, 0xc5, 0x7d, 0x81, 0xda, 0xb1, 0x85, 0x88, 0x82, 0x8f, 0xe2,
	0xe3, 0xf5, 0xfa, 0x6c, 0x55, 0x0c, 0x74, 0x4a, 0xb6, 0xfb, 0xfe, 0x4f, 0xbe, 0x3b, 0x9d, 0x21,
	0x3f, 0xa1, 0xae, 0x87, 0x11, 0x09, 0xc5, 0x1e, 0xf2, 0x06, 0xf5, 0x17, 0x29, 0x9a, 0xbc, 0x78,
	0x85, 0xac, 0x41, 0xfd, 0xd1, 0x79, 0x62, 0xcf, 0x90, 0x9e, 0x50, 0x4b, 0xfb, 0xc3, 0xa3, 0x32,
	0xae, 0xf6, 0x87, 0xac, 0x6e, 0x02, 0xca, 0x25, 0x16, 0xdf, 0x90, 0xce, 0x09, 0xbb, 0x87, 0x6d,
	0x67, 0x78, 0x54, 0x46, 0x55, 0x22, 0xb7, 0x9d, 0x61, 0x0c, 0x12, 0xa7, 0x7a, 0xcb, 0xb7, 0x65,
	0x54, 0xe5, 0x32, 0xd4, 0x8c, 0x43, 0x76, 0x1c, 0xd1, 0x91, 0xd2, 0x3c, 0x0e, 0xf1, 0x8a, 0xc1,
	0x60, 0xdf, 0x2b, 0x67, 0x78, 0xb2, 0x98, 0x19, 0xc5, 0x3b, 0xa4, 0xd2, 0xfa, 0xe9, 0x4c, 0x97,
	0x8e, 0x47, 0x34, 0x36, 0xcc, 0xd8, 0xc9, 0x50, 0x5f, 0xde, 0xf5, 0xd6, 0x7b, 0xd5, 0xae, 0x83,
	0x56, 0x3c, 0xfc, 0x46, 0x61, 0xb5, 0xcf, 0x76, 0x64, 0x0f, 0x10, 0x2b, 0x63, 0xd8, 0xba, 0x7c,
	0x91, 0xd5, 0x73, 0x47, 0xb1, 0x61, 0x4f, 0x90, 0x1a, 0x7b, 0xb6, 0x64, 0x6f, 0xd9, 0x69, 0x30,
	0xea, 0x86, 0x7d, 0x84, 0x9d, 0x27, 0x35, 0xd2, 0x55, 0x59, 0x40, 0xe2, 0x09, 0x87, 0xab, 0xee,
	0x05, 0xa0, 0xb5, 0x24, 0x27, 0xe7, 0x3a, 0xd7, 0x32, 0xa8, 0xff, 0x4f, 0x5f, 0xdc, 0xd5, 0xcb,
	0xe5, 0xc5, 0x46, 0xa7, 0xe1, 0x6b, 0xde, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x95, 0xb6,
	0xfd, 0xa7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobMgrClient is the client API for JobMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobMgrClient interface {
	Add(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error)
	Delete(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error)
	Update(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error)
	Start(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error)
	Stop(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error)
	GetRunning(ctx context.Context, in *JobStatus, opts ...grpc.CallOption) (*JobList, error)
}

type jobMgrClient struct {
	cc *grpc.ClientConn
}

func NewJobMgrClient(cc *grpc.ClientConn) JobMgrClient {
	return &jobMgrClient{cc}
}

func (c *jobMgrClient) Add(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/JobMgr/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobMgrClient) Delete(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/JobMgr/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobMgrClient) Update(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/JobMgr/update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobMgrClient) Start(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/JobMgr/start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobMgrClient) Stop(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/JobMgr/stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobMgrClient) GetRunning(ctx context.Context, in *JobStatus, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, "/JobMgr/getRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobMgrServer is the server API for JobMgr service.
type JobMgrServer interface {
	Add(context.Context, *JobReq) (*Result, error)
	Delete(context.Context, *JobReq) (*Result, error)
	Update(context.Context, *JobReq) (*Result, error)
	Start(context.Context, *JobReq) (*Result, error)
	Stop(context.Context, *JobReq) (*Result, error)
	GetRunning(context.Context, *JobStatus) (*JobList, error)
}

// UnimplementedJobMgrServer can be embedded to have forward compatible implementations.
type UnimplementedJobMgrServer struct {
}

func (*UnimplementedJobMgrServer) Add(ctx context.Context, req *JobReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedJobMgrServer) Delete(ctx context.Context, req *JobReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedJobMgrServer) Update(ctx context.Context, req *JobReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedJobMgrServer) Start(ctx context.Context, req *JobReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedJobMgrServer) Stop(ctx context.Context, req *JobReq) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedJobMgrServer) GetRunning(ctx context.Context, req *JobStatus) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunning not implemented")
}

func RegisterJobMgrServer(s *grpc.Server, srv JobMgrServer) {
	s.RegisterService(&_JobMgr_serviceDesc, srv)
}

func _JobMgr_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobMgrServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobMgr/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobMgrServer).Add(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobMgr_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobMgrServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobMgr/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobMgrServer).Delete(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobMgr_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobMgrServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobMgr/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobMgrServer).Update(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobMgr_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobMgrServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobMgr/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobMgrServer).Start(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobMgr_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobMgrServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobMgr/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobMgrServer).Stop(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobMgr_GetRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobMgrServer).GetRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobMgr/GetRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobMgrServer).GetRunning(ctx, req.(*JobStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "JobMgr",
	HandlerType: (*JobMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _JobMgr_Add_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _JobMgr_Delete_Handler,
		},
		{
			MethodName: "update",
			Handler:    _JobMgr_Update_Handler,
		},
		{
			MethodName: "start",
			Handler:    _JobMgr_Start_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _JobMgr_Stop_Handler,
		},
		{
			MethodName: "getRunning",
			Handler:    _JobMgr_GetRunning_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "job.proto",
}
